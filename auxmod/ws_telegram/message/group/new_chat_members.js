require('colors');
let path = require('path');
let Db = require(path.join(process.env.DIR, 'auxmod', 'mongodb'));
let inspect = require('util').inspect;

module.exports = async function groupNewChatMember(ctx){
    LOG_FUNC(arguments, __filename);
    ctx.reqInfo += ' ' + String(ctx.message.new_chat_participant.id).cyan + ' ' +
    String(ctx.message.new_chat_participant.first_name).white + '  ' +
    String(ctx.message.new_chat_participant.username).inverse;
    
    if(ctx.id == ctx.message.new_chat_participant.id){//—ç—Ç–æ–≥–æ –±–æ—Ç–∞ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏
      ctx.reqInfo += ' –ø—Ä–∏–≥–ª–∞—à–æ–Ω'.green;

      let chat = await ctx.getChat(ctx.chat.id);
      chat.from = ctx.from;
      chat.members_count = await ctx.getChatMembersCount(ctx.chat.id);
      chat.admins = await ctx.getChatAdministrators(ctx.chat.id);
      
      if(chat.photo){
        chat.photo_link = await ctx.telegram.getFileLink(chat.photo[Object.keys(chat.photo).pop()]);
      }

      ctx.chat.id = Db.Long.fromNumber(ctx.chat.id)

      if(ctx.from.id === ctx.owner){
        let r = await Db.updateOne({
          collection: 'telegram_' + ctx.username + '_subscribers',
          _id: ctx.chat.id,
          update: {$set: chat},
            opt: {upsert: true}
        });

        ctx.reply('–†–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞.');

        await ctx.telegram.sendMessage(ctx.owner_chat_log,
            inspect(chat, {depth: Infinity })
        );
        
        return ctx;
      }
      //–ø—Ä–∏–≥–ª–∞—Å–∏–ª –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü

      if(chat.members_count < 5){
          await ctx.reply(`–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ < 5.\n–£—Ö–æ–∂—É üòî`);
          await ctx.leaveChat(ctx.chat.id);
          return ctx;
      }

      let mess = `–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ ` +
      `${ctx.from.first_name ? ctx.from.first_name: ''}` +
      `${ctx.from.username ? ' ' + ctx.from.username: ''}\n\n` +
      `–†–∞–±–æ—Ç–∞ –Ω–∞—á–Ω—ë—Ç—Å—è –ø–æ—Å–ª–µ –æ–¥–æ–±–µ—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏.\n\n` +
      `–í—ã—à–∞ –∑–∞—è–≤–∫–∞:\n\n` +
      `${chat.title}\n` +
      `üë• ${chat.members_count}\n\n`+
      `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.`;

      let resp = await ctx.telegram.sendMessage(ctx.owner_chat_log,
          inspect(chat, {depth: Infinity }),{
            reply_markup: {
              inline_keyboard: [
                [{
                  text: '‚úÖ',
                  callback_data: `add_subscriber/?${chat.id}&add`
                },{
                  text: '‚ùå',
                  callback_data: `add_subscriber/?${chat.id}&false`
                }]
              ]
            }
          }
      );

      if(chat.photo_link){
          await ctx.telegram.sendPhoto(chat.id,
              {
                  url: chat.photo_link,
                  filename: chat.title},
                  {
                  
                  caption: mess//,
                  //reply_markup: {
                  //  inline_keyboard: keyboard
                  //}
              }
          )
          return ctx;
      }

      ctx.reply(mess);

      return ctx;
    }

    if(ctx.message.new_chat_participant.is_bot){
    	// await ctx.reply('–ß—Ç–æ –∂–µ —ç—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç, —á–µ–≥–æ –Ω–µ —É–º–µ—é –Ø!'+
    	// 	'\n–ï—â–µ –∏ –∏–º—è —Å—Ç—Ä–∞–Ω–Ω–æ–µ –∫–æ–∫–æ–µ-—Ç–æ ' + ctx.message.new_chat_participant.first_name);
    	return ctx;
    }
    
    let personName = ctx.message.new_chat_participant.username ? ' @' + ctx.message.new_chat_participant.username: '';

    // await ctx.reply('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é ' +
    // 	ctx.message.new_chat_participant.first_name +
		// personName + ' üëãüèª\n');
    return ctx;
};

